"""
Tries to open up a .ntf file and fetch some pixel values.
"""

from datetime import datetime
import pprint
import glob
import matplotlib.pyplot as plt

import seaborn as sns
import numpy as np
from osgeo import osr
from osgeo import ogr
# import imars_etl

from landcover_classify.read_bands_at import read_bands_at


def test_get_pixel_bands():
    pp = pprint.PrettyPrinter(indent=4)

    dt = datetime(2014, 12, 10, 9, 45)
    # === extract the nearest ntf
    # TODO: add area_id to limit # images
    # M1BS (multispectral)
    WV2_M_ID = 11
    # WV3_M_ID = "TODO"
    # # P1BS (panspectral)
    # WV2_P_ID = 24
    # WV3_P_ID = "TODO"
    # TODO: use datetime in this query
    # MySQL get nearest date; ref: https://stackoverflow.com/a/27401431/1483986
    # fpath = imars_etl.extract(
    #     sql="product_id in ({})".format(WV2_M_ID) +
    #     "ORDER BY abs(TIMESTAMPDIFF("
    #     "   second, date_time, '2014-12-10 09:45:00'))"
    #     "LIMIT 1"
    # )
    # manually set filepath for now:
    fpath = "16FEB12162517-M1BS-057380245010_01_P001.NTF"

    points = [
        (-81.7544265642093, 25.993898427524286),
        (-81.75454620316265, 25.99404298183112),
        (-81.7546522727647, 25.994196020357407),
        (-81.75475746156653, 25.99434948075785),
        (-81.75481054155361, 25.994425976365672),
        (-81.75496297726389, 25.994659183361872),
        (-81.75501334173572, 25.99473714931628),
        (-81.7551109047511, 25.99489463507967),
        (-81.75516403079197, 25.99497110467995),
        (-81.75532091873826, 25.99520174866413),
        (-81.75553567565777, 25.9955060123936),
        (-81.75559141753317, 25.99558094038749),
        (-81.75575511393785, 25.995807647847467),
        (-81.75580626934867, 25.995885207300088),
        (-81.7558574273948, 25.995962765349343),
        (-81.75590547162554, 25.99604192958582),
        (-81.75601010724533, 25.996195742152835),
        (-81.75622466176648, 25.996500388135523),
        (-81.7562763651485, 25.996577622879283),
        (-81.75642691240938, 25.996811706909234),
        (-81.75647716192269, 25.996889745486175),
        (-81.75653071969343, 25.996965968711898),
        (-81.75663893952006, 25.997117722148154),
        (-81.75679108644668, 25.997350993365902),
        (-81.75684153170705, 25.997428830287575),
        (-81.75689461543293, 25.997505320007512),
        (-81.7569711350888, 25.997436618138615),
        (-81.7569362496689, 25.997352051982432),
        (-81.75699962568585, 25.997471749658352),
        (-81.7570968018791, 25.997629527384447),
        (-81.75719878168698, 25.9977847846648),
        (-81.75728182347783, 25.997948798291596),
        (-81.75737817747178, 25.998106729453276),
        (-81.75748180656494, 25.998261084853862),
        (-81.75753211335685, 25.998339050827983),
        (-81.75674137385082, 25.997037521332466),
        (-81.7566394126216, 25.99688221409123),
        (-81.75653745657728, 25.996726904134647),
        (-81.75638451885702, 25.996493941279876),
        (-81.75575285612966, 25.996482112123378),
        (-81.75568996123282, 25.99641197587353),
        (-81.7555977935951, 25.99625193108113),
        (-81.75548200082036, 25.996104870920387),
        (-81.75542998014262, 25.996027835630752),
        (-81.75537952148149, 25.995949904489116),
        (-81.75532826628185, 25.995872400785203),
        (-81.75515626937131, 25.995651367591286),
        (-81.75510517629837, 25.99557590423663),
        (-81.75494054081382, 25.99535255812416),
        (-81.75488871312723, 25.99527563119415),
        (-81.75478039703286, 25.99512454982025),
        (-81.75466421152888, 25.994977640097254),
        (-81.75460521280327, 25.994904805756637),
        (-81.75455070488789, 25.99482913580893),
        (-81.75440149057219, 25.994594806638396),
        (-81.75433825725862, 25.994524899778064),
        (-81.75423329890786, 25.99437144811167),
        (-81.7541337592725, 25.994214896166323),
        (-81.75395647460373, 25.99399732318237),
        (-81.75390566082868, 25.993919594310196),
        (-81.75385100622127, 25.99384419520088),
        (-81.75379099301749, 25.993772010103957),
        (-81.75373114996617, 25.993699712573324),
        (-81.75367434371137, 25.993625493651162),
        (-81.75362015254179, 25.99354964839524),
        (-81.75356493623809, 25.993474416960943),
        (-81.75345916393947, 25.993321280398618),
        (-81.75321933790985, 25.993032744544628),
        (-81.75316499275752, 25.99295699170346),
        (-81.75310419216412, 25.99288538194085),
        (-81.75304453830303, 25.992812955159554),
        (-81.75298642446275, 25.99273951100052),
        (-81.75293136845791, 25.992664181082105),
        (-81.75287629382105, 25.99258884743717),
        (-81.75282225351616, 25.992512908202283),
        (-81.7526042107908, 25.992210258832667),
        (-81.75254753479003, 25.992135987433844),
        (-81.75248875510893, 25.992063010060356),
        (-81.75231485063351, 25.99184240976554),
        (-81.75225558724162, 25.991769718259718),
        (-81.75213548730378, 25.991625576811018),
        (-81.75133920683666, 25.991067095268026),
        (-81.75025145701764, 25.991079125686266),
        (-81.75030912468108, 25.99142880066256),
        (-81.7504172063376, 25.991580610716706),
        (-81.75057669624347, 25.99180933801401),
        (-81.75061788110578, 25.99189136999824),
        (-81.75073904445286, 25.992137261708457),
        (-81.77551001365744, 26.09488098003688),
        (-81.7752960771795, 26.094476584098114),
        (-81.77530063110788, 26.09429611939105),
    ]

    bandvals = read_bands_at(
        fpath,
        points
    )
    # pp.pprint(bandvals)
    # === remove nan rows
    pre_len = len(bandvals)
    bandvals = bandvals[~np.isnan(bandvals).any(axis=1)]
    print("{} valid values found (was {:2.2f}% NaNs)".format(
        len(bandvals),
        100 - 100*len(bandvals)/pre_len
    ))

    # === save output
    np.savetxt("filepath_dt_all_matrix.csv", bandvals, delimiter=",")

    ax = sns.violinplot(data=bandvals, split=True)
    # plt.show()
